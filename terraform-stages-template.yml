parameters:
  environment: test
  environmentDisplayName: Test
  TerraformArguments: ''
  TerraformEnvVariables:

stages:
- stage: Terraform_${{ parameters.environment }}
  displayName: Terraform ${{ parameters.environmentDisplayName }}
  pool: Default
  #  vmImage: ubuntu-latest
  jobs:

  - job: Terraform
    displayName: Terraform
    # Avoid concurrent Terraform runs on PRs, which would result in failures due to exclusive lock on remote state file.
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), variables['RUN_FLAG_TERRAFORM']))
    steps:

    - template: ../infrastructure/terraform-init-template.yml
      parameters:
        provisionStorage: true
        TerraformDirectory: terraform-job/terraform
        environment: ${{ parameters.environment }}

    - bash: |
        set -eu
        export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
        terraform plan -var environment=${{ parameters.environment }} ${{ parameters.TerraformArguments }}
      displayName: Terraform plan
      workingDirectory: terraform-job/terraform
      env:
        ${{ parameters.TerraformEnvVariables }}

- stage: PostTerraform_${{ parameters.environment }}
  displayName: PostTerraform ${{ parameters.environmentDisplayName }}
  pool: Default
   # vmImage: ubuntu-latest
  jobs:
  - job: ReadTerraform
    displayName: Use Terraform outputs
    steps:

    - template: ../infrastructure/terraform-init-template.yml
      parameters:
        TerraformDirectory: terraform-job/terraform
        environment: ${{ parameters.environment }}

    - template: ../infrastructure/terraform-outputs-template.yml
      parameters:
        TerraformDirectory: terraform-job/terraform

    - bash: |
        # Dummy job showing how to consume Terraform outputs
        echo Subscription ID: $(subscription_id)
        echo Resource group: $(resource_group_name)
      displayName: Sample script
